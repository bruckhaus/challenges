__author__ = 'tilmannbruckhaus'

# Even Fibonacci numbers
# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.


class Fibonacci:
    sequence = {}
    prepared_offset = 0

    def __init__(self):
        self.sequence[1] = 1
        self.sequence[2] = 2
        self.prepared_offset = 2

    def get(self, index):
        if index > self.prepared_offset:
            for i in range(self.prepared_offset + 1, index + 1):
                new_value = self.sequence[i - 2] + self.sequence[i - 1]
                self.sequence[i] = new_value
                print "Fibonacci: added", i, ":", new_value
            self.prepared_offset = index
        return self.sequence[index]

    def even_sum(self, limit):
        fibonacci_sum = 0
        i = 1
        f = self.get(i)
        while f <= limit:
            if f % 2 == 0:
                fibonacci_sum += f
                print "Even sum for", i, ":", fibonacci_sum
            i += 1
            f = self.get(i)
        return fibonacci_sum

if __name__ == '__main__':
    print Fibonacci().even_sum(4000000)
