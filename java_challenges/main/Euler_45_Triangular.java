public class Euler_45_Triangular {
    //    Project Euler - Problem 45 - Triangular, pentagonal, and hexagonal
    //    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    //    Triangle   Tn=n(n+1)/2   1, 3, 6, 10, 15, ...
    //    Pentagonal Pn=n(3n−1)/2  1, 5, 12, 22, 35, ...
    //    Hexagonal  Hn=n(2n−1)    1, 6, 15, 28, 45, ...
    //    It can be verified that T285 = P165 = H143 = 40755.
    //    Find the next triangle number that is also pentagonal and hexagonal.

    public static final int GIVEN = 40755;
    private static long triangularIndex = 1;
    private static long hexagonalIndex = 1;
    public static long triangular = 1;
    public static long hexagonal = 1;
    private static Pentagonal pentagonal = new Pentagonal();

    public static void main(String[] args) {
        long next = Euler_45_Triangular.next(GIVEN);
        System.out.printf("The next triangular number after %,d is %,d.\n", GIVEN ,next);
    }

    public Euler_45_Triangular() {
    }

    public static long next(long given) {
        while (!done(given)) {
            if (triangular < pentagonal.current() || triangular < hexagonal) {
                nextTriangular();
            } else if (pentagonal.current() < hexagonal) {
                pentagonal.next();
            } else {
                next_hexagonal();
            }
        }
        return triangular;
    }

    public static long nextTriangular() {
        triangularIndex++;
        triangular = triangularIndex * (triangularIndex + 1) / 2;
        return triangular;
    }

    public static long next_hexagonal() {
        hexagonalIndex++;
        hexagonal = hexagonalIndex * (2 * hexagonalIndex - 1);
        return hexagonal;
    }

    public static boolean done(long given) {
        return triangular > given &&
                triangular == pentagonal.current() &&
                triangular == hexagonal;
    }

    public static long pentagonalValue() {
        return pentagonal.current();
    }

    public static void reset() {
        pentagonal.reset();
        triangularIndex = 0;
        hexagonalIndex = 0;
        triangular = 0;
        hexagonal = 0;
    }
}
