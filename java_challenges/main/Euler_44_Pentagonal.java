import com.sun.glass.ui.Pen;

public class Euler_44_Pentagonal {
    // Project Euler - Pentagon numbers - Problem 44
    // Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
    // The first ten pentagonal numbers are:
    // 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    // It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
    // However, their difference, 70 − 22 = 48, is not pentagonal.
    // Find the pair of [special] pentagonal numbers, Pj and Pk,
    // for which their sum and difference are pentagonal
    // and D = |Pk − Pj| is minimised; what is the value of D?

    private static long minDifference = Long.MAX_VALUE;
    private static long pentagonal1 = 1;
    private static long pentagonal2 = 1;
    private static long lastPentagonal = 1;

    public static void main(String[] args) {
        long result = minSpecialPentagonalPairDiff();
        System.out.printf(
                "The minimal difference between special pairs of pentagonal numbers is %d.", result);
    }

    private static long minSpecialPentagonalPairDiff() {
        long nextDifference;
        while (true) {
            pentagonal1 = Pentagonal.next();
            nextDifference = pentagonal1 - lastPentagonal;
            if (nextDifference > minDifference) return minDifference;
            Pentagonal.reset();
            while (true) {
                pentagonal2 = Pentagonal.next();
                if (isSpecialPair()) minDifference = Math.min(minDifference, pentagonal1 - pentagonal2);
            }
            //lastPentagonal = pentagonal1;
        }
    }

    private static boolean isSpecialPair() {
        return pentagonal1 != pentagonal2;
    }
}
