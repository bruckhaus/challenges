public class Euler_44_Pentagonal {
    // Project Euler - Pentagon numbers - Problem 44
    // Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
    // The first ten pentagonal numbers are:
    // 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    // It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
    // However, their difference, 70 − 22 = 48, is not pentagonal.
    // Find the pair of [special] pentagonal numbers, Pj and Pk,
    // for which their sum and difference are pentagonal
    // and D = |Pk − Pj| is minimised; what is the value of D?

    public static void main(String[] args) {
        long result = minSpecialPentagonalPairDiff();
        System.out.printf(
                "The minimal difference between special pairs of pentagonal numbers is %d.", result);
    }

    private static long minSpecialPentagonalPairDiff() {
        Pentagonal pentagonal1 = new Pentagonal();
        Pentagonal pentagonal2 = new Pentagonal();
        long min = Long.MAX_VALUE;
        long step = 0;
        long p1 = 0;
        long p2 = 0;
        long last = 0;
        long delta = 0;
        pentagonal1.reset();
        while (true) {
            step++;
            p1 = pentagonal1.next();
            delta = p1 - last;
            System.out.print("step = " + step);
            System.out.print(", delta = " + delta);
            System.out.println(", p1 = " + p1);
            p2 = pentagonal2.reset();
            while (p2 < p1) {
                p2 = pentagonal2.next();
                if (isSpecialPair(p1, p2)) {
                    min = Math.min(min, p1 - p2);
                    return min;
                }
//                if (delta > min) return min;
            }
            last = p1;
        }
    }

    public static boolean isSpecialPair(long p1, long p2) {
        Pentagonal p = new Pentagonal();
        return p1 != p2 &&
                p.isPolygonal(p1 + p2) &&
                p.isPolygonal(Math.abs(p1 - p2));
    }
}
