public class Euler_44_Pentagonal {
    // Project Euler - Pentagon numbers - Problem 44
    // Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
    // The first ten pentagonal numbers are:
    // 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    // It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
    // However, their difference, 70 − 22 = 48, is not pentagonal.
    // Find the pair of [special] pentagonal numbers, Pj and Pk,
    // for which their sum and difference are pentagonal
    // and D = |Pk − Pj| is minimised; what is the value of D?

    private static Pentagonal pentagonal1 = new Pentagonal();
    private static Pentagonal pentagonal2 = new Pentagonal();
    private static long minDifference = Long.MAX_VALUE;
    private static long lastPentagonal = 1;

    public static void main(String[] args) {
        long result = minSpecialPentagonalPairDiff();
        System.out.printf(
                "The minimal difference between special pairs of pentagonal numbers is %d.", result);
    }

    private static long minSpecialPentagonalPairDiff() {
        long nextDifference;
        while (true) {
            pentagonal1.next();
            nextDifference = pentagonal1.current() - lastPentagonal;
            System.out.print("nextDifference = " + nextDifference);
            System.out.println(", pentagonal1 = " + pentagonal1.current());
            pentagonal2.reset();
            while (pentagonal2.current() < pentagonal1.current()) {
                pentagonal2.next();
                if (isSpecialPair()) {
                    minDifference = Math.min(minDifference, pentagonal1.current() - pentagonal2.current());
                }
                if (nextDifference > minDifference) return minDifference;
            }
            lastPentagonal = pentagonal1.current();
        }
    }

    private static boolean isSpecialPair() {
        return pentagonal1.current() != pentagonal2.current() &&
                pentagonal1.isPentagonal(pentagonal1.current() + pentagonal2.current()) &&
                pentagonal1.isPentagonal(pentagonal1.current() - pentagonal2.current());
    }
}
