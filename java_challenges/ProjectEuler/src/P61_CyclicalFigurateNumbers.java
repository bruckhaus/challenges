import java.util.ArrayList;
import java.util.Set;

public class P61_CyclicalFigurateNumbers {
    // Project Euler - Problem 61 - Cyclical figurate numbers
    // Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal)
    // numbers and are generated by the following formulae:
    // Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
    // Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
    // Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
    // Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
    // Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
    // Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
    // The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
    // The set is cyclic, in that the last two digits of each number is the first two digits of the next number
    // (including the last number with the first).
    // Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is
    // represented by a different number in the set.
    // This is the only set of 4-digit numbers with this property.
    // Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
    // triangle, square, pentagonal, hexagonal, heptagonal, and octagonal,
    // is represented by a different number in the set.

    public static void main(String[] args) {
        String message = "The sum of the only ordered set of six cyclic 4-digit numbers " +
                "for which each polygonal type: " +
                "triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, " +
                "is represented by a different number in the set is %,d\n" +
                "The set is: %s\n";
        Set<Integer> solution = P61_CyclicalFigurateNumbers.getList(6);
        long sum = P61_CyclicalFigurateNumbers.getSum(solution);
        System.out.printf(message, sum, solution.toString());
    }

    static Set<Integer> getList(int count) {
        return null;
    }

    static long getSum(Set<Integer> set) {
        long sum = 0;
        for (Integer i : set) sum += i;
        return sum;
    }
}
