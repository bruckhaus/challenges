import java.util.*;

public class P61_CyclicalFigurateNumbers {
    // Project Euler - Problem 61 - Cyclical figurate numbers
    // Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal)
    // numbers and are generated by the following formulae:
    // Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
    // Square	 	P4,n=n2	 	        1, 4, 9, 16, 25, ...
    // Pentagonal	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
    // Hexagonal	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
    // Heptagonal	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
    // Octagonal	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
    // The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
    // The set is cyclic, in that the last two digits of each number is the first two digits of the next number
    // (including the last number with the first).
    // Each polygonal type: triangle P(3,127)=8128, square P(4,91)=8281, and pentagonal P(5,44)=2882, is
    // represented by a different number in the set.
    // This is the only set of 4-digit numbers with this property.
    // Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
    // triangle, square, pentagonal, hexagonal, heptagonal, and octagonal,
    // is represented by a different number in the set.

    public static void main(String[] args) {
        String message = "The sum of the only ordered set of six cyclic 4-digit numbers " +
                "for which each polygonal type: " +
                "triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, " +
                "is represented by a different number in the set is %,d\n" +
                "The set is: %s\n";
        List<int[]> solution = P61_CyclicalFigurateNumbers.getList(6);
        long sum = P61_CyclicalFigurateNumbers.getSum(solution);
        System.out.printf(message, sum, solution.toString());
    }

    private static Polygonal triangular = new Triangular();
    private static Polygonal square = new Square();
    private static Polygonal pentagonal = new Pentagonal();
    private static Polygonal hexagonal = new Hexagonal();
    private static Polygonal heptagonal = new Heptagonal();
    private static Polygonal octagonal = new Octagonal();

    static List<int[]> getList(int size) {
        // iterate through octagonal seeds
        // for each polygonal (3 .. 7): attempt to add one new cyclical polygonal
        // track 1) partial solution, 2) polygonal id (3 .. 7) and 3) n in f(n) to attempt
        // recursive call
        return getList(size, 8, 1);
    }

    static List<int[]> getList(int size, int seed, Integer seedOffset) {
        if (size == 1) return makeList(seed, seedOffset);
        if (seed < 3) return null;
        int partialOffset = 1;
        while (true) {
            int[] polygonal = makePolygonal(seed, seedOffset);
            if (digitCount(polygonal) > 4) {
                seed--;
                seedOffset = 1;
            } else {
                List<int[]> partial = getList(size - 1, 8, partialOffset);
                List<int[]> solution = checkSolution(partial, polygonal);
                if (solution == null) {
                    partialOffset++;
                } else {
                    return partial;
                }
            }
        }
    }

    static List<int[]> checkSolution(List<int[]> partial, int[] polygonal) {
        partial.add(polygonal);
        if (isSolution(partial)) return partial;
        return null;
    }

    static boolean isSolution(List<int[]> solution) {
        if (solution.size() < 1) return true;
        int[] item = solution.get(0);
        for (int i = 1; i < solution.size() - 1; i++) {
            int[] next = solution.get(i);
            if (!isCyclic(item, next)) return false;
            item = next;
        }
        return true;
    }

    static boolean isCyclic(int[] polygonal1, int[] polygonal2) {
        String first = "" + P61_CyclicalFigurateNumbers.getValue(polygonal1);
        String second = "" + P61_CyclicalFigurateNumbers.getValue(polygonal2);
        String lastTwoDigits = first.substring(first.length() - 2);
        String firstTwoDigits = second.substring(0, 2);
        return lastTwoDigits.equals(firstTwoDigits);
    }

    static List<int[]> makeList(int order, Integer n) {
        List<int[]> list = new ArrayList<>();
        while (digitCount(makePolygonal(order, n)) < 4) n++;
        list.add(makePolygonal(order, n));
        return list;
    }

    static int[] makePolygonal(int order, Integer n) {
        return new int[]{order, n};
    }

    static long getSum(List<int[]> list) {
        long sum = 0;
        long value;
        for (int[] item : list) {
            value = getValue(item);
            sum += value;
        }
        return sum;
    }

    static int digitCount(int[] polygonal) {
        long value = getValue(polygonal);
        if (value < 0) return 0;
        return ("" + value).length();
    }

    static long getValue(int[] item) {
        switch (item[0]) {
            case 3:
                return triangular.function(item[1]);
            case 4:
                return square.function(item[1]);
            case 5:
                return pentagonal.function(item[1]);
            case 6:
                return hexagonal.function(item[1]);
            case 7:
                return heptagonal.function(item[1]);
            case 8:
                return octagonal.function(item[1]);
            default:
                return -1;
        }
    }
}
