import org.junit.Test;

import java.math.BigInteger;

import static org.junit.Assert.*;

public class P48_SelfPowersTest {

    @Test
    public void testGetSelfPowerSumLast() throws Exception {
        assertEquals(1, P48_SelfPowers.getSelfPowerSumLast(1, 1));
        assertEquals(13, P48_SelfPowers.getSelfPowerSumLast(5, 2));
        assertEquals(317, P48_SelfPowers.getSelfPowerSumLast(10, 3));
        assertEquals(41920, P48_SelfPowers.getSelfPowerSumLast(100, 5));
        assertEquals(9110846700L, P48_SelfPowers.getSelfPowerSumLast(1000, 10));
    }

    @Test
    public void testGetSelfPowerSum() throws Exception {
        assertEquals("1", P48_SelfPowers.getSelfPowerSum(1).toString());
        assertEquals("3413", P48_SelfPowers.getSelfPowerSum(5).toString());
        assertEquals("10405071317", P48_SelfPowers.getSelfPowerSum(10).toString());
        assertEquals(EXPECTED_SELF_POWER_SUM_100, P48_SelfPowers.getSelfPowerSum(100).toString());
        assertEquals(EXPECTED_SELF_POWER_SUM_1000, P48_SelfPowers.getSelfPowerSum(1000).toString());
    }

    @Test
    public void testGetSelfPower() throws Exception {
        assertEquals("1", P48_SelfPowers.getSelfPower(1).toString());
        assertEquals("27", P48_SelfPowers.getSelfPower(3).toString());
        assertEquals("3125", P48_SelfPowers.getSelfPower(5).toString());
        assertEquals("16777216", P48_SelfPowers.getSelfPower(8).toString());
        assertEquals("10000000000", P48_SelfPowers.getSelfPower(10).toString());
    }

    @Test
    public void testGetLast() throws Exception {
        assertEquals(21, P48_SelfPowers.getLast(new BigInteger("0987654321"), 2));
        assertEquals(54321, P48_SelfPowers.getLast(new BigInteger("0987654321"), 5));
        assertEquals(7654321, P48_SelfPowers.getLast(new BigInteger("0987654321"), 7));
        assertEquals(9027641920L, P48_SelfPowers.getLast(new BigInteger(EXPECTED_SELF_POWER_SUM_100), 10));
        assertEquals(9110846700L, P48_SelfPowers.getLast(new BigInteger(EXPECTED_SELF_POWER_SUM_1000), 10));
    }

    public static final String EXPECTED_SELF_POWER_SUM_100 = "" +
            "1003711157461764453517012107133619415285468619490735145420151724372365800346347469712449437881324601" +
            "50776779198800002366059871900041784732217539059306483834977865973576751345853385981719448969027641920";

    public static final String EXPECTED_SELF_POWER_SUM_1000 = "" +
            "1000368199144695177095375011227646795567793680622934654583760988100234910747716194381428659099527845" +
            "9458699426431912908947203429799064076796472598604342384680383260408096910376153703762377136485100631" +
            "1573295146177424670558426686575960181584366644283228455688031311454815153919097539848549664557651346" +
            "5858582712336401166221956188173449531674102688908321764663020306699770408625340766091595022791379368" +
            "0983693063756028138566463587737515587752134602257965798465833340073493586243423393329813345712378888" +
            "0928310334876026136017595081560917946402687100524365210998086355214201424290343406856093657323107934" +
            "2194031864413918101238151056509267393515760392842472501391594073463001521843811073767021711026307504" +
            "6957334678978218669066484698283466074129673958017977916836098347224322419528453525646818682403695695" +
            "6619282555532355807806199752768998384886337478678933158156525205917261433942460098614325923316758337" +
            "1070362625554531852054166117148858229508581589614337594463277554380518380921301218836327102231407332" +
            "2011097401025802164692983317669206196460837907328076273606144280851715650062897285086889642267996471" +
            "9258292405858953075067457838536556187855958968575622569234891474692281091391561983475411764835803581" +
            "4128670294158565669942087736286390942241547226015004471330630113072042704288905042142628193771918594" +
            "5743022021472011884863459131908337523074769660105474239288710631187830260363813190390520082520720579" +
            "3366671291894623331279369709407422418787204597097644430924278218773832025749008082433007499169869823" +
            "9561125811127607863900355221737846690567707344074494145266662103839812840216303448476913957072355732" +
            "7166270983722452230467929197472591131574258240648583314154009432782130429546350535740452099845122212" +
            "6424190355017841682455141254863759000777908253928824775165356689988274959440589510258798553952770949" +
            "3510049546445427265617478399107188238681771215904234119392247489751079085948055945098805617963722928" +
            "4695542637822176251604280082288455525403444948601952671151870922277661957539072111266461501406147442" +
            "3397476527347561996431185285861416781966834012473048771016200679352998575882065367727437956331349545" +
            "4526632718723482339494825759821076401694316043456512117937935456463521463021197726694983558929132357" +
            "5761885949775166307342128638694561642055255367673112981371825114946494636630737592192130568235616677" +
            "7609373942574288393071260996216346408803882656913203216069263720618308594298797368458427649178484311" +
            "5472077900401692595694119273553511025991265446039366288921743581333200083717105241171504606883543418" +
            "8620240475521770552634244695012989059019381582459386336941050248151666798136891566683411977134750943" +
            "8990488712679446890189385047505001120522574245555562575056021323038791033798395033324502065323898911" +
            "5507013882956277763880795687210857196493893142656713105966275422144605988058939600603604226921401402" +
            "0965192942504886702979833963532794604531423755422678819891974817897806789550937631936586036908984748" +
            "26976906544473978017455720367929981796023041785852626797271283465789498383642350667978127819110846700";
}
